{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Simple-Example-of-a-simple-SFZ-file","level":2,"type":"heading","text":"Simple Example of a simple SFZ file"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your sampling needs are not very complex, as in, you simply just need to load your "},{"type":"codeVoice","code":"Sampler"},{"type":"text","text":" with a variety samples, here is an example of a working SFZ File:"}]},{"type":"codeListing","syntax":null,"code":["<control>","default_path=samples\/","<global>","<group>key=33","<region> sample=A1.wv","<group>key=34","<region> sample=A#1.wv","<group>key=35","<region> sample=B1.wv","<group>key=36","<region> sample=C2.wv","<group>key=37","<region> sample=C#2.wv","<group>key=38","<region> sample=D2.wv","<group>key=39","<region> sample=D#2.wv","<group>key=40","<region> sample=E2.wv","<group>key=41","<region> sample=F2.wv","<group>key=42","<region> sample=F#2.wv","<group>key=43","<region> sample=G2.wv","<group>key=44","<region> sample=G#2.wv","<group>key=45","<region> sample=A2.wv","<group>key=46","<region> sample=A#2.wv","<group>key=47","<region> sample=B2.wv","<group>key=48","<region> sample=C3.wv","<group>key=49","<region> sample=C#3.wv","<group>key=50","<region> sample=D3.wv","<group>key=51","<region> sample=D#3.wv","<group>key=52","<region> sample=E3.wv","<group>key=53","<region> sample=F3.wv","<group>key=54","<region> sample=F#3.wv","<group>key=55","<region> sample=G3.wv","<group>key=56","<region> sample=G#3.wv","<group>key=57","<region> sample=A3.wv","<group>key=58","<region> sample=A#3.wv","<group>key=59","<region> sample=B3.wv","<group>key=60","<region> sample=C4.wv","<group>key=61","<region> sample=C#4.wv","<group>key=62","<region> sample=D4.wv","<group>key=63","<region> sample=D#4.wv","<group>key=64","<region> sample=E4.wv","<group>key=65","<region> sample=F4.wv","<group>key=66","<region> sample=F#4.wv","<group>key=67","<region> sample=G4.wv","<group>key=68","<region> sample=G#4.wv","<group>key=69","<region> sample=A4.wv","<group>key=70","<region> sample=A#4.wv","<group>key=71","<region> sample=B4.wv","<group>lokey=72 hikey=80 pitch_keycenter=72","<region> sample=C5.wv"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This SFZ file is an example of a piano sampler with samples matched note for note in most octaves. Let’s go over from top to bottom:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"<control>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a necessary SFZ keyword to denote that this is indeed a SFZ file."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"default_path=samples\/"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The path in which the samples you are describing in the SFZ file reside. In this example SFZ file, we have a folder named "},{"type":"codeVoice","code":"samples"},{"type":"text","text":" that is in the same directory as the SFZ file. You may name your folder any name, as long as it is described correctly in the SFZ file. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"You will need to ensure that your folder of samples and the path is described correctly. If your SFZ file resides in a different directory, please be sure find the correct path for the folder of samples so that the SFZ can correctly find them"}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"<group>key=33"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information on the "},{"type":"codeVoice","code":"<group>"},{"type":"text","text":" SFZ keyword, please read "},{"type":"reference","isActive":true,"identifier":"https:\/\/sfzformat.com\/headers\/group"},{"type":"text","text":". Here we are preparing the MIDI note 33 to be assigned to a sample."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"<region> sample=A1.wv>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information on the "},{"type":"codeVoice","code":"<region>"},{"type":"text","text":" SFZ keyword, please read "},{"type":"reference","isActive":true,"identifier":"https:\/\/sfzformat.com\/headers\/region"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we are assigning a specific sample you have collected to the above group\/key."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So now with:"},{"type":"text","text":" "},{"type":"codeVoice","code":"<group>key=33"},{"type":"text","text":" "},{"type":"codeVoice","code":"<region> sample=A1.wv>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Our sampler will assign key 33 to the sample "},{"type":"codeVoice","code":"A1.wv"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example file, we are just continuing to assign 1 to 1 keys to samples."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lets look at the last 2 lines:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"<group>lokey=72 hikey=80 pitch_keycenter=72 <region> sample=C5.wv"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lokey"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hikey"},{"type":"text","text":" allows us to use one sample to map to multiple keys or MIDI notes. "},{"type":"codeVoice","code":"pitch_keycenter"},{"type":"text","text":" tells us where to center the key or MIDI note for the sample. In these two lines, we are assigning the sample "},{"type":"codeVoice","code":"C5.wv"},{"type":"text","text":" to MIDI notes (or keys) 72 "},{"type":"emphasis","inlineContent":[{"type":"text","text":"through"}]},{"type":"text","text":" 80. The sampler will pitch shift the sample in order to accommodate the higher\/lower notes. Be aware that small amounts of pitch shifting will be hard to discern, but anything past a Perfect 5th (7 semitones) will start to exhibit pitch shifting artifacts. Check out more information on "},{"type":"reference","isActive":true,"identifier":"https:\/\/sfzformat.com\/opcodes\/hikey"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"https:\/\/sfzformat.com\/opcodes\/pitch_keycenter"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"IMPORTANT"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"In order for the Audiokit "},{"type":"codeVoice","code":"Sampler"},{"type":"text","text":" to load your samples correctly, in your "},{"type":"codeVoice","code":"<region>"},{"type":"text","text":" declarations, the sample assignment MUST BE THE LAST ELEMENT of your "},{"type":"codeVoice","code":"<region>"},{"type":"text","text":" declarations."}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"<region>"},{"type":"text","text":" has other opcodes you can use such as "},{"type":"codeVoice","code":"lovel"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hivel"},{"type":"text","text":", if you do not place your "},{"type":"codeVoice","code":"sample=YOURSAMPLENAME.YOURFILEFORMAT"},{"type":"text","text":" as the last element in the "},{"type":"codeVoice","code":"<region>"},{"type":"text","text":" line, the samples will not load!"}]},{"anchor":"Scripts-for-MainStage-3-Autosampler","level":2,"type":"heading","text":"Scripts for MainStage 3 Autosampler"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The autosampler built into Apple’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MainStage 3"}]},{"type":"text","text":" produces AIFF-C audio files and an EXS24 metadata file, in a newer format than vonRed’s "},{"type":"codeVoice","code":"exstosfz.py"},{"type":"text","text":" script can handle. However, all the necessary details are actually encoded right in the "},{"type":"codeVoice","code":".aif"},{"type":"text","text":" sample files. The following Python script uses a simplistic parsing technique to pull the necessary numbers out of a set of "},{"type":"codeVoice","code":".aif"},{"type":"text","text":" files and create a corresponding "},{"type":"codeVoice","code":".sfz"},{"type":"text","text":" file:"}]},{"type":"codeListing","syntax":"python","code":["import sys, os","import struct"," ","if len(sys.argv) != 3:","    print('usage: python parse.py <dirname> <noteoffset>')","    exit(0)"," ","baseName = sys.argv[1]","noteOffset = int(sys.argv[2])"," ","itemList = list()","for filename in os.listdir(baseName):","    if filename.endswith('.aif'):","        noteName = filename.split('-')[1][:-4]","        octaveNumber = int(noteName[-1])","        letters = noteName[:-1]","        noteNumber = 12","        if letters == 'F#':","            noteNumber += 6","        noteNumber += octaveNumber * 12 + noteOffset","        itemList.append((noteNumber, noteName))"," ","sfz = open(baseName + '.sfz', 'w')"," ","itemList.sort()","for (noteNumber, noteName) in itemList:","    filePath = os.path.join(baseName, baseName + '-' + noteName + '.aif')","    data = open(filePath, 'rb').read(100)","    start = struct.unpack_from('>I', data, 0x32)[0]","    end = struct.unpack_from('>I', data, 0x3E)[0]","    loopStart = struct.unpack_from('>I', data, 0x48)[0]","    loopEnd = struct.unpack_from('>I', data, 0x58)[0]","    if noteNumber == itemList[0][0]:","        sfz.write('<group>lokey=0 hikey=%d pitch_keycenter=%d pitch_keytrack=100\\n' % (noteNumber+3, noteNumber))","    elif noteNumber == itemList[-1][0]:","        sfz.write('<group>lokey=%d hikey=127 pitch_keycenter=%d pitch_keytrack=100\\n' % (noteNumber-2, noteNumber))","    else:","        sfz.write('<group>lokey=%d hikey=%d pitch_keycenter=%d pitch_keytrack=100\\n' % (noteNumber-2, noteNumber+3, noteNumber))","    sfz.write('    <region> lovel=000 hivel=127')","    if start > 0:","        sfz.write(' offset=%d' % start)","    if end > 0:","        sfz.write(' end=%d' % end)","    if loopStart > 0 and loopEnd > 0:","        sfz.write(' loop_mode=loop_sustain loop_start=%d loop_end=%d' % (loopStart, loopEnd))","    sfz.write(' sample=%s\\n' % filePath)"," ","sfz.close()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note this script relies on the standard Python module "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.python.org\/2\/library\/struct.html"},{"type":"text","text":" to parse binary data. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"It won’t work with all AIFF files"}]},{"type":"text","text":", though, because it doesn’t actually understand the "},{"type":"reference","isActive":true,"identifier":"http:\/\/www-mmsp.ece.mcgill.ca\/Documents\/AudioFormats\/AIFF\/AIFF.html"},{"type":"text","text":". The following is a preliminary version of a new Python 2.7 script which does a better job of parsing an individual AIFF file:"}]},{"type":"codeListing","syntax":"python","code":["import chunk, struct"," ","def readCOMM(chk):","    print 'COMM', chk.getsize()","    data = chk.read()","    channels, frames, bitsPerSample, exp, mant = struct.unpack('>hIhhQ', data)","    print channels, 'channels,', frames, 'frames,', bitsPerSample, 'bits\/sample',","    # simplified conversion of 80-bit SANE float, using 1st 32 bits of mantissa","    sampleRate = ((mant >> 32) \/ pow(2.0, 31)) * pow(2.0, exp - 16383)","    print sampleRate, 'samples\/sec'"," ","def readMARK(chk):","    print 'MARK', chk.getsize()","    count = struct.unpack('>h', chk.read(2))[0]","    for i in xrange(count):","        id, position, charCount = struct.unpack('>hIB', chk.read(7))","        name = chk.read(charCount)","        print '  ', id, position, name"," ","def loopModeName(mode):","    if mode == 0:","        return 'NoLoop'","    elif mode == 1:","        return 'FwdLoop'","    elif mode == 2:","        return 'FwdRev'","    else:","        return '?mode?', mode"," ","def readINST(chk):","    print 'INST', chk.getsize()","    baseNote, detune, lowNote, highNote, lowVel, highVel, gain = struct.unpack('>bbbbbbh', chk.read(8))","    susLoopMode, susloopStart, susLoopEnd = struct.unpack('>hhh', chk.read(6))","    relLoopMode, relloopStart, relLoopEnd = struct.unpack('>hhh', chk.read(6))","    print '  note', baseNote, 'detune', detune,","    print 'noteRange', lowNote, '-', highNote, ","    print 'velRange', lowVel, '-', highVel","    print '  susLoop', loopModeName(susLoopMode), susloopStart, susLoopEnd","    print '  relLoop', loopModeName(relLoopMode), relloopStart, relLoopEnd"," ","file = open('X50 Brothers Acoustic-C4.aif')","chk = chunk.Chunk(file)","name = chk.getname()","if name != b'FORM':","    print \"File starts with '%s' not 'FORM'\" % name","    exit()","size = chk.getsize()","kind = chk.read(4)","print name, size, kind"," ","while 1:","    try:","        chk = chunk.Chunk(file)","    except EOFError:","        break","    name = chk.getname()","    if name == b'COMM':","        readCOMM(chk)","    elif name == b'MARK':","        readMARK(chk)","    elif name == b'INST':","        readINST(chk)","    else:","        size = chk.getsize()","        print name, size","    chk.skip()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This script makes use of the "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.python.org\/2\/library\/chunk.html"},{"type":"text","text":" Python library, together with specific data gleaned from the "},{"overridingTitleInlineContent":[{"type":"text","text":"AIFF-C format specifications"}],"isActive":true,"type":"reference","identifier":"http:\/\/www-mmsp.ece.mcgill.ca\/Documents\/AudioFormats\/AIFF\/AIFF.html","overridingTitle":"AIFF-C format specifications"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The obvious next step is to combine elements of both scripts, to produce a better version of the first one."}]},{"anchor":"How-the-demo-SFZ-files-were-made-back-in-2018","level":2,"type":"heading","text":"How the demo SFZ files were made back in 2018"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Matt originally provided "},{"type":"codeVoice","code":".exs"},{"type":"text","text":" metadata files for use by Apple’s EXS24 Sampler plugin included with Logic Pro X. These files use a proprietary binary format and are notoriously difficult to work with. There used to be a Python script by KVR user vonRed called "},{"type":"codeVoice","code":"exstosfz.py"},{"type":"text","text":"but this is no longer maintained and only works with older EXS-Files. You may find this "},{"type":"reference","isActive":true,"identifier":"https:\/\/bitbucket-archive.softwareheritage.org\/projects\/la\/larromba\/exstosfz.html"},{"type":"text","text":" as reference."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/dunneaudiokit\/sampler-sfz-files"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/DunneAudioKit\/documentation\/DunneAudioKit\/Sampler-SFZ-files","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Sampler has a naive implementation of reading SFZ files. This article shows a simple example of a SFZ file and a script for Mainstage 3."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Sampler with SFZ files","role":"article","modules":[{"name":"DunneAudioKit"}]},"hierarchy":{"paths":[["doc:\/\/DunneAudioKit\/documentation\/DunneAudioKit"]]},"references":{"https://docs.python.org/2/library/chunk.html":{"title":"chunk","titleInlineContent":[{"type":"text","text":"chunk"}],"type":"link","identifier":"https:\/\/docs.python.org\/2\/library\/chunk.html","url":"https:\/\/docs.python.org\/2\/library\/chunk.html"},"https://sfzformat.com/headers/region":{"title":"here","titleInlineContent":[{"type":"text","text":"here"}],"type":"link","identifier":"https:\/\/sfzformat.com\/headers\/region","url":"https:\/\/sfzformat.com\/headers\/region"},"https://sfzformat.com/opcodes/pitch_keycenter":{"title":"pitch_keycenter","titleInlineContent":[{"type":"codeVoice","code":"pitch_keycenter"}],"type":"link","identifier":"https:\/\/sfzformat.com\/opcodes\/pitch_keycenter","url":"https:\/\/sfzformat.com\/opcodes\/pitch_keycenter"},"https://docs.python.org/2/library/struct.html":{"title":"struct","titleInlineContent":[{"type":"text","text":"struct"}],"type":"link","identifier":"https:\/\/docs.python.org\/2\/library\/struct.html","url":"https:\/\/docs.python.org\/2\/library\/struct.html"},"http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html":{"title":"AIFF format","titleInlineContent":[{"type":"text","text":"AIFF format"}],"type":"link","identifier":"http:\/\/www-mmsp.ece.mcgill.ca\/Documents\/AudioFormats\/AIFF\/AIFF.html","url":"http:\/\/www-mmsp.ece.mcgill.ca\/Documents\/AudioFormats\/AIFF\/AIFF.html"},"https://sfzformat.com/opcodes/hikey":{"title":"lokey and hikey","titleInlineContent":[{"type":"codeVoice","code":"lokey"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hikey"}],"type":"link","identifier":"https:\/\/sfzformat.com\/opcodes\/hikey","url":"https:\/\/sfzformat.com\/opcodes\/hikey"},"https://sfzformat.com/headers/group":{"title":"here","titleInlineContent":[{"type":"text","text":"here"}],"type":"link","identifier":"https:\/\/sfzformat.com\/headers\/group","url":"https:\/\/sfzformat.com\/headers\/group"},"doc://DunneAudioKit/documentation/DunneAudioKit":{"role":"collection","title":"DunneAudioKit","abstract":[{"type":"text","text":"Chorus, Flanger, Sampler, Stereo Delay, and Synth for AudioKit, by Shane Dunne."}],"identifier":"doc:\/\/DunneAudioKit\/documentation\/DunneAudioKit","kind":"symbol","type":"topic","url":"\/documentation\/dunneaudiokit"},"https://bitbucket-archive.softwareheritage.org/projects/la/larromba/exstosfz.html":{"title":"archived Mercurial repository of exstosfz.py","titleInlineContent":[{"type":"text","text":"archived Mercurial repository of exstosfz.py"}],"type":"link","identifier":"https:\/\/bitbucket-archive.softwareheritage.org\/projects\/la\/larromba\/exstosfz.html","url":"https:\/\/bitbucket-archive.softwareheritage.org\/projects\/la\/larromba\/exstosfz.html"}}}